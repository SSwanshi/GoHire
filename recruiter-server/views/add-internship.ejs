<%- include('layout/header') %>

<div class="gradientyandb min-h-screen flex items-center justify-center">
  <div class="max-w-lg mx-auto p-6 bg-blue-100 rounded-lg shadow-md md:w-full max-w-[800px] mx-auto">
    <h2 class="text-2xl font-bold text-blue-800 mb-4">Post a New Internship</h2>
    <form id="internshipForm" action="<%= isEdit ? '/recruiter/edit-internship/' + internship._id : '/recruiter/add-internship' %>" method="POST" class="space-y-4">

      <div class="grid grid-cols-2 gap-4">
        <div>
          <label for="intTitle" class="block text-blue-700 font-medium">Title</label>
          <input type="text" id="intTitle" name="intTitle" required
                 value="<%= isEdit && internship ? internship.intTitle : '' %>"
                 class="w-full mt-1 p-2 border border-blue-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none">
          <p class="text-red-500 text-sm hidden" id="titleError">Title must be at least 5 characters.</p>
        </div>
        <div>
          <label for="intDescription" class="block text-blue-700 font-medium">Description</label>
          <input type="text" id="intDescription" name="intDescription" required
                 value="<%= isEdit && internship ? internship.intDescription : '' %>"
                 class="w-full mt-1 p-2 border border-blue-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none">
          <p class="text-red-500 text-sm hidden" id="descriptionError">Description must be at least 10 characters.</p>
        </div>
      </div>
    
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label for="intRequirements" class="block text-blue-700 font-medium">Requirements</label>
          <input type="text" id="intRequirements" name="intRequirements" required
                 value="<%= isEdit && internship ? internship.intRequirements : '' %>"
                 class="w-full mt-1 p-2 border border-blue-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none">
          <p class="text-red-500 text-sm hidden" id="requirementsError">Requirements must be at least 5 characters.</p>
        </div>
        <div>
          <label for="intStipend" class="block text-blue-700 font-medium">Stipend (per month)</label>
          <input type="number" id="intStipend" name="intStipend" required min="0"
                 value="<%= isEdit && internship ? internship.intStipend : '' %>"
                 class="w-full mt-1 p-2 border border-blue-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none">
          <p class="text-red-500 text-sm hidden" id="stipendError">Stipend must be a positive number.</p>
        </div>
      </div>
    
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label for="intLocation" class="block text-blue-700 font-medium">Location</label>
          <input type="text" id="intLocation" name="intLocation" required
                 value="<%= isEdit && internship ? internship.intLocation : '' %>"
                 class="w-full mt-1 p-2 border border-blue-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none">
          <p class="text-red-500 text-sm hidden" id="locationError">Location must be at least 3 characters.</p>
        </div>
        <div>
          <label for="intDuration" class="block text-blue-700 font-medium">Internship Duration (in months)</label>
          <input type="number" id="intDuration" name="intDuration" required min="1"
                 value="<%= isEdit && internship ? internship.intDuration : '' %>"
                 class="w-full mt-1 p-2 border border-blue-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none">
          <p class="text-red-500 text-sm hidden" id="durationError">Duration must be at least 1 month.</p>
        </div>
      </div>
    
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label for="intExperience" class="block text-blue-700 font-medium">Experience Level (in years)</label>
          <input type="number" id="intExperience" name="intExperience" required min="0"
                 value="<%= isEdit && internship ? internship.intExperience : '' %>"
                 class="w-full mt-1 p-2 border border-blue-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none">
          <p class="text-red-500 text-sm hidden" id="experienceError">Experience must be 0 or more years.</p>
        </div>
        <div>
          <label for="intPositions" class="block text-blue-700 font-medium">No of Positions</label>
          <input type="number" id="intPositions" name="intPositions" required min="1"
                 value="<%= isEdit && internship ? internship.intPositions : '' %>"
                 class="w-full mt-1 p-2 border border-blue-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none">
          <p class="text-red-500 text-sm hidden" id="positionsError">Must be at least 1 position.</p>
        </div>
      </div>
    
      <div>
        <div>
          <label for="intExpiry" class="block text-blue-700 font-medium">Application Deadline</label>
          <input type="date" id="intExpiry" name="intExpiry" required
                 value="<%= isEdit && internship ? internship.intExpiry.toISOString().substring(0, 10) : '' %>"
                 class="w-full mt-1 p-2 border border-blue-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none">
        </div>
        
        <div>
        <label for="intCompany" class="block text-blue-700 font-medium">Company</label>
        <select id="intCompany" name="intCompany" required
                class="w-full mt-1 p-2 border border-blue-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none">
          <option value="">Select a company</option>
          <% companies.forEach(company => { %>
            <option value="<%= company._id %>"
              <%= isEdit && internship && internship.intCompany && internship.intCompany._id.toString() === company._id.toString() ? 'selected' : '' %>>
              <%= company.companyName %>
            </option>
          <% }); %>
        </select>
        <p class="text-red-500 text-sm hidden" id="companyError">Please select a company.</p>
      </div>
      </div>
    
      <button type="submit" id="submitBtn"
              class="w-full bg-blue-700 text-yellow-400 font-semibold py-2 rounded-md hover:bg-blue-800 hover:text-yellow-300 transition-all">
        <%= isEdit ? 'Update Internship' : 'Post New Internship' %>
      </button>
    
    </form>
    
  </div>
</div>

<script>
document.getElementById("internshipForm").addEventListener("submit", function(event) {
    event.preventDefault(); // Always prevent default form submission
    
    let isValid = true;

    function validateField(id, minLength, errorId) {
        const value = document.getElementById(id).value.trim();
        const errorElement = document.getElementById(errorId);
        if (value.length < minLength) {
            errorElement.classList.remove("hidden");
            isValid = false;
        } else {
            errorElement.classList.add("hidden");
        }
    }

    function validateNumberField(id, minValue, errorId) {
        const value = document.getElementById(id).value;
        const errorElement = document.getElementById(errorId);
        if (value === "" || value < minValue) {
            errorElement.classList.remove("hidden");
            isValid = false;
        } else {
            errorElement.classList.add("hidden");
        }
    }

    validateField("intTitle", 5, "titleError");
    validateField("intDescription", 10, "descriptionError");
    validateField("intRequirements", 5, "requirementsError");
    validateField("intLocation", 3, "locationError");

    validateNumberField("intStipend", 0, "stipendError");
    validateNumberField("intDuration", 1, "durationError");
    validateNumberField("intExperience", 0, "experienceError");
    validateNumberField("intPositions", 1, "positionsError");

    const company = document.getElementById("intCompany").value;
    if (company === "") {
        document.getElementById("companyError").classList.remove("hidden");
        isValid = false;
    } else {
        document.getElementById("companyError").classList.add("hidden");
    }

    if (!isValid) {
        return;
    }

    // Submit form via AJAX
    submitInternshipForm();
});

function submitInternshipForm() {
    const form = document.getElementById("internshipForm");
    const submitBtn = document.getElementById("submitBtn");
    const originalText = submitBtn.innerHTML;
    
    // Show loading state
    submitBtn.disabled = true;
    submitBtn.innerHTML = '⏳ Processing...';

    // Create FormData
    const formData = new FormData(form);

    // Create XMLHttpRequest
    const xhr = new XMLHttpRequest();
    xhr.open('POST', form.action, true);
    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                const response = JSON.parse(xhr.responseText);
                if (response.success) {
                    showNotification(response.message, 'success');
                    // Reset form
                    form.reset();
                    // Redirect after 2 seconds
                    setTimeout(() => {
                        window.location.href = '/recruiter/internships';
                    }, 2000);
                } else {
                    showNotification(response.message, 'error');
                    // Reset button
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalText;
                }
            } else {
                showNotification('Error submitting form', 'error');
                // Reset button
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            }
        }
    };
    
    xhr.send(formData);
}

function showNotification(message, type) {
    // Remove existing notifications
    const existing = document.querySelector('.notification');
    if (existing) existing.remove();
    
    const notification = document.createElement('div');
    notification.className = `notification fixed top-5 right-5 p-4 rounded-md shadow-lg z-50 ${
        type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
    }`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 3000);
}
</script>

<%- include('layout/footer') %>
