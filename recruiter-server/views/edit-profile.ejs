<%- include('layout/header') %>

<div class="max-w-3xl mx-auto py-8 px-4">
  <h2 class="text-2xl font-bold text-blue-800 mb-6">Edit Profile</h2>
  
  <form action="/recruiter/edit-profile" method="POST" class="bg-white rounded-lg shadow-md p-6 border border-blue-100">
    <!-- Name Fields -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
      <div>
        <label for="firstName" class="block text-sm font-medium text-blue-700 mb-1">
          First Name <span class="text-yellow-600">*</span>
        </label>
        <input type="text" id="firstName" name="firstName" value="<%= user.firstName %>" required
          class="w-full px-3 py-2 border border-blue-200 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
      </div>
      <div>
        <label for="lastName" class="block text-sm font-medium text-blue-700 mb-1">
          Last Name
        </label>
        <input type="text" id="lastName" name="lastName" value="<%= user.lastName %>"
          class="w-full px-3 py-2 border border-blue-200 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
      </div>
    </div>

    <!-- Email Field -->
    <div class="mb-6">
      <label for="email" class="block text-sm font-medium text-blue-700 mb-1">
        Email <span class="text-yellow-600">*</span>
      </label>
      <input type="email" id="email" name="email" value="<%= user.email %>" readonly
        class="w-full px-3 py-2 bg-blue-50 border border-blue-200 rounded-md text-gray-500 cursor-not-allowed">
    </div>

    <!-- Phone Field -->
    <div class="mb-6">
      <label for="phone" class="block text-sm font-medium text-blue-700 mb-1">
        Phone <span class="text-yellow-600">*</span>
      </label>
      <div class="flex">
        <div class="inline-flex items-center px-3 py-2 border border-r-0 border-blue-200 rounded-l-md bg-blue-50 text-blue-800">
          +91 
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
          </svg>
        </div>
        <input type="tel" id="phone" name="phone" value="<%= user.phone %>" required
          class="flex-1 px-3 py-2 border border-blue-200 rounded-r-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
      </div>
    </div>

    <!-- Gender Field -->
    <div class="mb-8">
      <label class="block text-sm font-medium text-blue-700 mb-2">
        Gender <span class="text-yellow-600">*</span>
      </label>
      <div class="flex flex-wrap gap-4">
        <% ['male', 'female', 'other'].forEach(option => { %>
          <div class="flex items-center">
            <input type="radio" id="<%= option %>" name="gender" value="<%= option %>"
              <%= user.gender === option ? 'checked' : '' %> required
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-blue-300">
            <label for="<%= option %>" class="ml-2 capitalize text-blue-800"><%= option %></label>
          </div>
        <% }) %>
      </div>
    </div>

    <!-- Change Password -->
    <div class="mb-6">
      <label for="newPassword" class="block text-sm font-medium text-blue-700 mb-1">
        Change Password
      </label>
      <input type="password" id="newPassword" name="newPassword" placeholder="New Password"
        class="w-full px-3 py-2 border border-blue-200 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
    </div>

    <div class="mb-8">
      <label for="confirmPassword" class="block text-sm font-medium text-blue-700 mb-1">
        Retype New Password
      </label>
      <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Retype New Password"
        disabled
        class="w-full px-3 py-2 border border-blue-100 rounded-md text-gray-400 bg-gray-50 transition">
    </div>

    <!-- Form Actions -->
    <div class="flex justify-end items-center pt-4 border-t border-blue-100">
      <button type="submit"
        class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md shadow-sm transition flex items-center">
        Save Changes
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
      </button>
    </div>
  </form>
</div>



<script>
  // Form validation patterns
  const validationPatterns = {
    firstName: /^[a-zA-Z\s]{2,30}$/,
    lastName: /^[a-zA-Z\s]{0,30}$/,
    phone: /^[6-9]\d{9}$/
  };

  // Error messages
  const errorMessages = {
    firstName: 'First name must be 2-30 characters, letters and spaces only',
    lastName: 'Last name must be 0-30 characters, letters and spaces only',
    phone: 'Phone number must be 10 digits starting with 6-9',
    confirmPassword: 'Passwords do not match'
  };

  // Get form elements
  const form = document.querySelector('form');
  const firstNameInput = document.getElementById('firstName');
  const lastNameInput = document.getElementById('lastName');
  const phoneInput = document.getElementById('phone');
  const newPasswordInput = document.getElementById('newPassword');
  const confirmPasswordInput = document.getElementById('confirmPassword');

  // Function to show error message
  function showError(input, message) {
    const errorDiv = input.parentNode.querySelector('.error-message');
    const successDiv = input.parentNode.querySelector('.success-message');
    
    // Remove success message if exists
    if (successDiv) {
      successDiv.remove();
    }
    
    if (errorDiv) {
      errorDiv.textContent = message;
    } else {
      const errorElement = document.createElement('div');
      errorElement.className = 'error-message text-red-500 text-sm mt-1';
      errorElement.textContent = message;
      input.parentNode.appendChild(errorElement);
    }
    input.classList.add('border-red-500', 'focus:ring-red-500');
    input.classList.remove('border-blue-200', 'focus:ring-blue-500', 'border-green-500');
  }

  // Function to show success message
  function showSuccess(input, message) {
    const errorDiv = input.parentNode.querySelector('.error-message');
    const successDiv = input.parentNode.querySelector('.success-message');
    
    // Remove error message if exists
    if (errorDiv) {
      errorDiv.remove();
    }
    
    if (successDiv) {
      successDiv.textContent = message;
    } else {
      const successElement = document.createElement('div');
      successElement.className = 'success-message text-green-500 text-sm mt-1';
      successElement.textContent = message;
      input.parentNode.appendChild(successElement);
    }
  }

  // Function to clear error message
  function clearError(input) {
    const errorDiv = input.parentNode.querySelector('.error-message');
    const successDiv = input.parentNode.querySelector('.success-message');
    
    if (errorDiv) {
      errorDiv.remove();
    }
    if (successDiv) {
      successDiv.remove();
    }
    
    input.classList.remove('border-red-500', 'focus:ring-red-500', 'border-green-500');
    input.classList.add('border-blue-200', 'focus:ring-blue-500');
  }

  // Function to validate field
  function validateField(input, pattern, errorMessage) {
    const value = input.value.trim();
    
    if (input.hasAttribute('required') && !value) {
      showError(input, 'This field is required');
      return false;
    }
    
    if (value && !pattern.test(value)) {
      showError(input, errorMessage);
      return false;
    }
    
    clearError(input);
    return true;
  }

  // Function to validate password confirmation
  function validatePasswordConfirmation() {
    const password = newPasswordInput.value;
    const confirmPassword = confirmPasswordInput.value;
    
    // If confirm password has value, validate it
    if (confirmPassword) {
      if (password !== confirmPassword) {
        showError(confirmPasswordInput, errorMessages.confirmPassword);
        return false;
      } else {
        // Show success message and styling when passwords match
        showSuccess(confirmPasswordInput, 'Passwords match!');
        confirmPasswordInput.classList.add('border-green-500');
        confirmPasswordInput.classList.remove('border-blue-200');
        return true;
      }
    }
    
    // If confirm password is empty, clear any existing error and styling
    clearError(confirmPasswordInput);
    return true;
  }

  // Real-time validation for first name
  firstNameInput.addEventListener('input', () => {
    validateField(firstNameInput, validationPatterns.firstName, errorMessages.firstName);
  });

  // Real-time validation for last name
  lastNameInput.addEventListener('input', () => {
    validateField(lastNameInput, validationPatterns.lastName, errorMessages.lastName);
  });

  // Real-time validation for phone
  phoneInput.addEventListener('input', () => {
    validateField(phoneInput, validationPatterns.phone, errorMessages.phone);
  });

  // Real-time validation for new password
  newPasswordInput.addEventListener('input', () => {
    // Always validate confirmation when password changes
    validatePasswordConfirmation();
  });

  // Real-time validation for confirm password
  confirmPasswordInput.addEventListener('input', () => {
    validatePasswordConfirmation();
  });

  // Enable confirm password when new password is focused
  newPasswordInput.addEventListener('focus', () => {
    confirmPasswordInput.disabled = false;
    confirmPasswordInput.classList.remove('bg-gray-50', 'text-gray-400');
    confirmPasswordInput.classList.add('bg-white', 'text-black', 'border-blue-200');
  });

  // Form submission validation
  form.addEventListener('submit', (e) => {
    let isValid = true;

    // Validate all required fields
    isValid &= validateField(firstNameInput, validationPatterns.firstName, errorMessages.firstName);
    isValid &= validateField(phoneInput, validationPatterns.phone, errorMessages.phone);

    // Validate last name if it has value
    if (lastNameInput.value.trim()) {
      isValid &= validateField(lastNameInput, validationPatterns.lastName, errorMessages.lastName);
    }

    // Validate password if provided
    if (newPasswordInput.value) {
      isValid &= validatePasswordConfirmation();
    }

    if (!isValid) {
      e.preventDefault();
      // Scroll to first error
      const firstError = form.querySelector('.error-message');
      if (firstError) {
        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
  });

  // Clear errors on focus
  [firstNameInput, lastNameInput, phoneInput, newPasswordInput, confirmPasswordInput].forEach(input => {
    input.addEventListener('focus', () => {
      clearError(input);
    });
  });

</script>

<%- include('layout/footer') %>
